{"ast":null,"code":"import mockData from'./mock-data';export const checkToken=async accessToken=>{try{const response=await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);const result=await response.json();return result;}catch(error){console.error(\"Error checking token:\",error);return{error:\"Token check failed\"};}};export const getAccessToken=async()=>{const accessToken=localStorage.getItem('access_token');const tokenCheck=accessToken&&(await checkToken(accessToken));if(!accessToken||tokenCheck.error){localStorage.removeItem(\"access_token\");const searchParams=new URLSearchParams(window.location.search);const code=searchParams.get(\"code\");if(!code){try{const response=await fetch('https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url');const result=await response.json();const{authUrl}=result;window.location.href=authUrl;return null;// Explicitly return null if redirecting\n}catch(error){console.error(\"Error fetching auth URL:\",error);return null;}}return code&&getToken(code);}return accessToken;};/**\n * Extracts unique locations from the events array.\n * @param {Array} events - The events array\n * @returns {Array} Unique locations\n */export const extractLocations=events=>{const extractedLocations=events.map(event=>event.location);return[...new Set(extractedLocations)];};/**\n * Fetches the list of events, using mock data in a local environment.\n * @returns {Array|null} The list of events, or null if fetching fails\n */export const getEvents=async()=>{if(window.location.href.startsWith(\"http://localhost\")){return mockData;}const token=await getAccessToken();if(token){removeQuery();const url=\"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-events\"+\"/\"+token;try{const response=await fetch(url);const result=await response.json();return result.events||null;}catch(error){console.error(\"Error fetching events:\",error);return null;}}return null;};/**\n * Removes the OAuth query parameters from the URL.\n */const removeQuery=()=>{const newUrl=window.location.protocol+\"//\"+window.location.host+window.location.pathname;if(window.history.pushState){window.history.pushState(\"\",\"\",newUrl);}else{window.location.href=newUrl;}};/**\n * Retrieves an access token using the provided authorization code.\n * @param {string} code - The authorization code from Google OAuth.\n * @returns {string|null} The access token, or null if the fetch fails.\n */const getToken=async code=>{try{const encodeCode=encodeURIComponent(code);const response=await fetch(`https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/token/${encodeCode}`);const{access_token}=await response.json();if(access_token){localStorage.setItem(\"access_token\",access_token);}return access_token;}catch(error){console.error(\"Error fetching token:\",error);return null;}};","map":{"version":3,"names":["mockData","checkToken","accessToken","response","fetch","result","json","error","console","getAccessToken","localStorage","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","window","location","search","code","get","authUrl","href","getToken","extractLocations","events","extractedLocations","map","event","Set","getEvents","startsWith","token","removeQuery","url","newUrl","protocol","host","pathname","history","pushState","encodeCode","encodeURIComponent","access_token","setItem"],"sources":["/Users/loganmartin/Desktop/meetUpApp/meet/src/api.js"],"sourcesContent":["import mockData from './mock-data';\n\nexport const checkToken = async (accessToken) => {\n  try {\n    const response = await fetch(\n      `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n    );\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error(\"Error checking token:\", error);\n    return { error: \"Token check failed\" };\n  }\n};\n\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get(\"code\");\n    if (!code) {\n      try {\n        const response = await fetch(\n          'https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url'\n        );\n        const result = await response.json();\n        const { authUrl } = result;\n        window.location.href = authUrl;\n        return null; // Explicitly return null if redirecting\n      } catch (error) {\n        console.error(\"Error fetching auth URL:\", error);\n        return null;\n      }\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n};\n\n/**\n * Extracts unique locations from the events array.\n * @param {Array} events - The events array\n * @returns {Array} Unique locations\n */\nexport const extractLocations = (events) => {\n  const extractedLocations = events.map((event) => event.location);\n  return [...new Set(extractedLocations)];\n};\n\n/**\n * Fetches the list of events, using mock data in a local environment.\n * @returns {Array|null} The list of events, or null if fetching fails\n */\nexport const getEvents = async () => {\n  if (window.location.href.startsWith(\"http://localhost\")) {\n    return mockData;\n  }\n\n  const token = await getAccessToken();\n  if (token) {\n    removeQuery();\n    const url = \"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-events\" + \"/\" + token;\n    try {\n      const response = await fetch(url);\n      const result = await response.json();\n      return result.events || null;\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      return null;\n    }\n  }\n  return null;\n};\n\n/**\n * Removes the OAuth query parameters from the URL.\n */\nconst removeQuery = () => {\n  const newUrl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n  if (window.history.pushState) {\n    window.history.pushState(\"\", \"\", newUrl);\n  } else {\n    window.location.href = newUrl;\n  }\n};\n\n/**\n * Retrieves an access token using the provided authorization code.\n * @param {string} code - The authorization code from Google OAuth.\n * @returns {string|null} The access token, or null if the fetch fails.\n */\nconst getToken = async (code) => {\n  try {\n    const encodeCode = encodeURIComponent(code);\n    const response = await fetch(\n      `https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/token/${encodeCode}`\n    );\n    const { access_token } = await response.json();\n    if (access_token) {\n      localStorage.setItem(\"access_token\", access_token);\n    }\n    return access_token;\n  } catch (error) {\n    console.error(\"Error fetching token:\", error);\n    return null;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}