{"ast":null,"code":"import NProgress from 'nprogress';\nimport mockData from './mock-data';\n\n/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\nexport const extractLocations = events => {\n  const extractedLocations = events.map(event => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const response = await fetch(\"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url\");\n      const result = await response.json();\n      const {\n        authUrl\n      } = result;\n      return window.location.href = authUrl;\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n};\nconst checkToken = async accessToken => {\n  const response = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);\n  const result = await response.json();\n  return result;\n};\nconst removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\n/**\n *\n * This function will fetch the list of all events\n */\nexport const getEvents = async () => {\n  if (window.location.href.startsWith('http://localhost')) {\n    return mockData;\n  }\n  if (!navigator.onLine) {\n    const events = localStorage.getItem(\"lastEvents\");\n    NProgress.done();\n    return events ? JSON.parse(events) : [];\n  }\n  const token = await getAccessToken();\n  if (token) {\n    removeQuery();\n    const url = \"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-events\" + \"/\" + token;\n    const response = await fetch(url);\n    const result = await response.json();\n    if (result) {\n      NProgress.done();\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.events));\n      return result.events;\n    } else return null;\n  }\n};\nconst getToken = async code => {\n  try {\n    const encodeCode = encodeURIComponent(code);\n    const response = await fetch(\"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/token\" + '/' + encodeCode);\n    const {\n      access_token\n    } = await response.json();\n    access_token && localStorage.setItem(\"access_token\", access_token);\n    return access_token;\n  } catch (error) {\n    error.json();\n  }\n};","map":{"version":3,"names":["NProgress","mockData","extractLocations","events","extractedLocations","map","event","location","locations","Set","getAccessToken","accessToken","localStorage","getItem","tokenCheck","checkToken","error","removeItem","searchParams","URLSearchParams","window","search","code","get","response","fetch","result","json","authUrl","href","getToken","removeQuery","newurl","history","pushState","pathname","protocol","host","getEvents","startsWith","navigator","onLine","done","JSON","parse","token","url","setItem","stringify","encodeCode","encodeURIComponent","access_token"],"sources":["/Users/loganmartin/Desktop/meetUpApp/meet/src/api.js"],"sourcesContent":["import NProgress from 'nprogress';\nimport mockData from './mock-data';\n\n\n/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\nexport const extractLocations = (events) => {\n    const extractedLocations = events.map((event) => event.location);\n    const locations = [...new Set(extractedLocations)];\n    return locations;\n};\n\nexport const getAccessToken = async () => {\n    const accessToken = localStorage.getItem('access_token');\n    const tokenCheck = accessToken && (await checkToken(accessToken));\n\n    if (!accessToken || tokenCheck.error) {\n        await localStorage.removeItem(\"access_token\");\n        const searchParams = new URLSearchParams(window.location.search);\n        const code = await searchParams.get(\"code\");\n        if (!code) {\n            const response = await fetch(\n                \"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url\" \n            );\n            const result = await response.json();\n            const { authUrl } = result;\n            return (window.location.href = authUrl);\n        }\n        return code && getToken(code);\n    }\n    return accessToken;\n};\n\nconst checkToken = async (accessToken) => {\n    const response = await fetch(\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n    );\n    const result = await response.json();\n    return result;\n};\n\nconst removeQuery = () => {\n    let newurl;\n    if (window.history.pushState && window.location.pathname) {\n        newurl =\n            window.location.protocol +\n            \"//\" +\n            window.location.host +\n            window.location.pathname;\n        window.history.pushState(\"\", \"\", newurl);\n    } else {\n        newurl = window.location.protocol + \"//\" + window.location.host;\n        window.history.pushState(\"\", \"\", newurl);\n    }\n};\n\n/**\n *\n * This function will fetch the list of all events\n */\nexport const getEvents = async () => {\n    if (window.location.href.startsWith('http://localhost')) {\n        return mockData;\n    }\n    if (!navigator.onLine) {\n        const events = localStorage.getItem(\"lastEvents\");\n        NProgress.done();\n        return events ? JSON.parse(events) : [];\n\n    }\n    const token = await getAccessToken();\n\n    if (token) {\n        removeQuery();\n        const url =  \"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-events\" + \"/\" + token;\n        const response = await fetch(url);\n        const result = await response.json();\n        if (result) {\n            NProgress.done();\n            localStorage.setItem(\"lastEvents\", JSON.stringify(result.events));\n            return result.events;\n        } else return null;\n    }\n};\n\nconst getToken = async (code) => {\n    try {\n        const encodeCode = encodeURIComponent(code);\n        const response = await fetch(\n          \"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/token\" + '/' + encodeCode\n        );\n        const { access_token } = await response.json();\n        access_token && localStorage.setItem(\"access_token\", access_token);\n\n        return access_token;\n    } catch (error) {\n        error.json();\n    }\n};"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,OAAOC,QAAQ,MAAM,aAAa;;AAGlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAIC,MAAM,IAAK;EACxC,MAAMC,kBAAkB,GAAGD,MAAM,CAACE,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAAC;EAChE,MAAMC,SAAS,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACL,kBAAkB,CAAC,CAAC;EAClD,OAAOI,SAAS;AACpB,CAAC;AAED,OAAO,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACxD,MAAMC,UAAU,GAAGH,WAAW,KAAK,MAAMI,UAAU,CAACJ,WAAW,CAAC,CAAC;EAEjE,IAAI,CAACA,WAAW,IAAIG,UAAU,CAACE,KAAK,EAAE;IAClC,MAAMJ,YAAY,CAACK,UAAU,CAAC,cAAc,CAAC;IAC7C,MAAMC,YAAY,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACb,QAAQ,CAACc,MAAM,CAAC;IAChE,MAAMC,IAAI,GAAG,MAAMJ,YAAY,CAACK,GAAG,CAAC,MAAM,CAAC;IAC3C,IAAI,CAACD,IAAI,EAAE;MACP,MAAME,QAAQ,GAAG,MAAMC,KAAK,CACxB,6EACJ,CAAC;MACD,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACpC,MAAM;QAAEC;MAAQ,CAAC,GAAGF,MAAM;MAC1B,OAAQN,MAAM,CAACb,QAAQ,CAACsB,IAAI,GAAGD,OAAO;IAC1C;IACA,OAAON,IAAI,IAAIQ,QAAQ,CAACR,IAAI,CAAC;EACjC;EACA,OAAOX,WAAW;AACtB,CAAC;AAED,MAAMI,UAAU,GAAG,MAAOJ,WAAW,IAAK;EACtC,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CACxB,+DAA+Dd,WAAW,EAC9E,CAAC;EACD,MAAMe,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EACpC,OAAOD,MAAM;AACjB,CAAC;AAED,MAAMK,WAAW,GAAGA,CAAA,KAAM;EACtB,IAAIC,MAAM;EACV,IAAIZ,MAAM,CAACa,OAAO,CAACC,SAAS,IAAId,MAAM,CAACb,QAAQ,CAAC4B,QAAQ,EAAE;IACtDH,MAAM,GACFZ,MAAM,CAACb,QAAQ,CAAC6B,QAAQ,GACxB,IAAI,GACJhB,MAAM,CAACb,QAAQ,CAAC8B,IAAI,GACpBjB,MAAM,CAACb,QAAQ,CAAC4B,QAAQ;IAC5Bf,MAAM,CAACa,OAAO,CAACC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAEF,MAAM,CAAC;EAC5C,CAAC,MAAM;IACHA,MAAM,GAAGZ,MAAM,CAACb,QAAQ,CAAC6B,QAAQ,GAAG,IAAI,GAAGhB,MAAM,CAACb,QAAQ,CAAC8B,IAAI;IAC/DjB,MAAM,CAACa,OAAO,CAACC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAEF,MAAM,CAAC;EAC5C;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMM,SAAS,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAIlB,MAAM,CAACb,QAAQ,CAACsB,IAAI,CAACU,UAAU,CAAC,kBAAkB,CAAC,EAAE;IACrD,OAAOtC,QAAQ;EACnB;EACA,IAAI,CAACuC,SAAS,CAACC,MAAM,EAAE;IACnB,MAAMtC,MAAM,GAAGS,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACjDb,SAAS,CAAC0C,IAAI,CAAC,CAAC;IAChB,OAAOvC,MAAM,GAAGwC,IAAI,CAACC,KAAK,CAACzC,MAAM,CAAC,GAAG,EAAE;EAE3C;EACA,MAAM0C,KAAK,GAAG,MAAMnC,cAAc,CAAC,CAAC;EAEpC,IAAImC,KAAK,EAAE;IACPd,WAAW,CAAC,CAAC;IACb,MAAMe,GAAG,GAAI,2EAA2E,GAAG,GAAG,GAAGD,KAAK;IACtG,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAACqB,GAAG,CAAC;IACjC,MAAMpB,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACpC,IAAID,MAAM,EAAE;MACR1B,SAAS,CAAC0C,IAAI,CAAC,CAAC;MAChB9B,YAAY,CAACmC,OAAO,CAAC,YAAY,EAAEJ,IAAI,CAACK,SAAS,CAACtB,MAAM,CAACvB,MAAM,CAAC,CAAC;MACjE,OAAOuB,MAAM,CAACvB,MAAM;IACxB,CAAC,MAAM,OAAO,IAAI;EACtB;AACJ,CAAC;AAED,MAAM2B,QAAQ,GAAG,MAAOR,IAAI,IAAK;EAC7B,IAAI;IACA,MAAM2B,UAAU,GAAGC,kBAAkB,CAAC5B,IAAI,CAAC;IAC3C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1B,sEAAsE,GAAG,GAAG,GAAGwB,UACjF,CAAC;IACD,MAAM;MAAEE;IAAa,CAAC,GAAG,MAAM3B,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC9CwB,YAAY,IAAIvC,YAAY,CAACmC,OAAO,CAAC,cAAc,EAAEI,YAAY,CAAC;IAElE,OAAOA,YAAY;EACvB,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACZA,KAAK,CAACW,IAAI,CAAC,CAAC;EAChB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}