{"ast":null,"code":"import mockData from './mock-data';\n\n/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\nexport const extractLocations = events => {\n  const extractedLocations = events.map(event => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\nconst removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\nconst checkToken = async accessToken => {\n  const response = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);\n  const result = await response.json();\n  return result;\n};\n\n/**\n *\n * This function will fetch the list of all events\n */\nexport const getEvents = async () => {\n  if (window.location.href.startsWith('http://localhost')) {\n    return mockData;\n  }\n  if (!navigator.onLine) {\n    const events = localStorage.getItem(\"lastEvents\");\n    NProgress.done();\n    return events ? JSON.parse(events) : [];\n  }\n  const token = await getAccessToken();\n  if (token) {\n    removeQuery();\n    const url = \"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-events\" + \"/\" + token;\n    const response = await fetch(url);\n    const result = await response.json();\n    if (result) {\n      return result.events;\n    } else return null;\n  }\n};\nconst getToken = async code => {\n  const encodeCode = encodeURIComponent(code);\n  const response = await fetch(\"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/token\" + '/' + encodeCode);\n  const {\n    access_token\n  } = await response.json();\n  access_token && localStorage.setItem(\"access_token\", access_token);\n  return access_token;\n};\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const response = await fetch('https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url');\n      const result = await response.json();\n      const {\n        authUrl\n      } = result;\n      return window.location.href = authUrl;\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n};","map":{"version":3,"names":["mockData","extractLocations","events","extractedLocations","map","event","location","locations","Set","removeQuery","newurl","window","history","pushState","pathname","protocol","host","checkToken","accessToken","response","fetch","result","json","getEvents","href","startsWith","navigator","onLine","localStorage","getItem","NProgress","done","JSON","parse","token","getAccessToken","url","getToken","code","encodeCode","encodeURIComponent","access_token","setItem","tokenCheck","error","removeItem","searchParams","URLSearchParams","search","get","authUrl"],"sources":["/Users/loganmartin/Desktop/meetUpApp/meet/src/api.js"],"sourcesContent":["import mockData from './mock-data';\n\n/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\nexport const extractLocations = (events) => {\n  const extractedLocations = events.map((event) => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\n\nconst removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl =\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\nconst checkToken = async (accessToken) => {\n  const response = await fetch(\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n  );\n  const result = await response.json();\n  return result;\n};\n\n/**\n *\n * This function will fetch the list of all events\n */\nexport const getEvents = async () => {\n  if (window.location.href.startsWith('http://localhost')) {\n    return mockData;\n  }\n  if (!navigator.onLine) {\n    const events = localStorage.getItem(\"lastEvents\");\n    NProgress.done();\n    return events ? JSON.parse(events) : [];\n\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    removeQuery();\n    const url =  \"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-events\" + \"/\" + token;\n    const response = await fetch(url);\n    const result = await response.json();\n    if (result) {\n      return result.events;\n    } else return null; \n  }\n};\n\nconst getToken = async (code) => {\n  const encodeCode = encodeURIComponent(code);\n  const response = await fetch(\n    \"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/token\" + '/' + encodeCode\n  );\n  const { access_token } = await response.json();\n  access_token && localStorage.setItem(\"access_token\", access_token);\n\n  return access_token;\n};\n\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n      if (!code) {\n        const response = await fetch(\n            'https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url'\n        );\n        const result = await response.json();\n        const { authUrl } = result;\n        return (window.location.href = authUrl);\n      }\n      return code && getToken(code);\n      }\n  return accessToken;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}