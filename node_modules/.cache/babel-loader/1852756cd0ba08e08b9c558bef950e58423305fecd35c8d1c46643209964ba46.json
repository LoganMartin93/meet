{"ast":null,"code":"import NProgress from'nprogress';import mockData from'./mock-data';/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */export const extractLocations=events=>{const extractedLocations=events.map(event=>event.location);const locations=[...new Set(extractedLocations)];return locations;};export const getAccessToken=async()=>{const accessToken=localStorage.getItem('access_token');const tokenCheck=accessToken&&(await checkToken(accessToken));if(!accessToken||tokenCheck.error){await localStorage.removeItem(\"access_token\");const searchParams=new URLSearchParams(window.location.search);const code=await searchParams.get(\"code\");if(!code){const response=await fetch(\"YOUR_SERVERLESS_GET_AUTH_URL_ENDPOINT\");const result=await response.json();const{authUrl}=result;return window.location.href=authUrl;}return code&&getToken(code);}return accessToken;};const checkToken=async accessToken=>{const response=await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);const result=await response.json();return result;};const removeQuery=()=>{let newurl;if(window.history.pushState&&window.location.pathname){newurl=window.location.protocol+\"//\"+window.location.host+window.location.pathname;window.history.pushState(\"\",\"\",newurl);}else{newurl=window.location.protocol+\"//\"+window.location.host;window.history.pushState(\"\",\"\",newurl);}};/**\n *\n * This function will fetch the list of all events\n */export const getEvents=async()=>{if(window.location.href.startsWith('http://localhost')){return mockData;}if(!navigator.onLine){const events=localStorage.getItem(\"lastEvents\");NProgress.done();return events?JSON.parse(events):[];}const token=await getAccessToken();if(token){removeQuery();const url=\"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-events\"+\"/\"+token;const response=await fetch(url);const result=await response.json();if(result){NProgress.done();localStorage.setItem(\"lastEvents\",JSON.stringify(result.events));return result.events;}else return null;}};const getToken=async code=>{try{const encodeCode=encodeURIComponent(code);const response=await fetch(\"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/token\"+'/'+encodeCode);const{access_token}=await response.json();access_token&&localStorage.setItem(\"access_token\",access_token);return access_token;}catch(error){error.json();}};","map":{"version":3,"names":["NProgress","mockData","extractLocations","events","extractedLocations","map","event","location","locations","Set","getAccessToken","accessToken","localStorage","getItem","tokenCheck","checkToken","error","removeItem","searchParams","URLSearchParams","window","search","code","get","response","fetch","result","json","authUrl","href","getToken","removeQuery","newurl","history","pushState","pathname","protocol","host","getEvents","startsWith","navigator","onLine","done","JSON","parse","token","url","setItem","stringify","encodeCode","encodeURIComponent","access_token"],"sources":["/Users/loganmartin/Desktop/meetUpApp/meet/src/api.js"],"sourcesContent":["import NProgress from 'nprogress';\nimport mockData from './mock-data';\n\n\n/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\nexport const extractLocations = (events) => {\n    const extractedLocations = events.map((event) => event.location);\n    const locations = [...new Set(extractedLocations)];\n    return locations;\n};\n\nexport const getAccessToken = async () => {\n    const accessToken = localStorage.getItem('access_token');\n    const tokenCheck = accessToken && (await checkToken(accessToken));\n\n    if (!accessToken || tokenCheck.error) {\n        await localStorage.removeItem(\"access_token\");\n        const searchParams = new URLSearchParams(window.location.search);\n        const code = await searchParams.get(\"code\");\n        if (!code) {\n            const response = await fetch(\n                \"YOUR_SERVERLESS_GET_AUTH_URL_ENDPOINT\"\n            );\n            const result = await response.json();\n            const { authUrl } = result;\n            return (window.location.href = authUrl);\n        }\n        return code && getToken(code);\n    }\n    return accessToken;\n};\n\nconst checkToken = async (accessToken) => {\n    const response = await fetch(\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n    );\n    const result = await response.json();\n    return result;\n};\n\nconst removeQuery = () => {\n    let newurl;\n    if (window.history.pushState && window.location.pathname) {\n        newurl =\n            window.location.protocol +\n            \"//\" +\n            window.location.host +\n            window.location.pathname;\n        window.history.pushState(\"\", \"\", newurl);\n    } else {\n        newurl = window.location.protocol + \"//\" + window.location.host;\n        window.history.pushState(\"\", \"\", newurl);\n    }\n};\n\n/**\n *\n * This function will fetch the list of all events\n */\nexport const getEvents = async () => {\n    if (window.location.href.startsWith('http://localhost')) {\n        return mockData;\n    }\n    if (!navigator.onLine) {\n        const events = localStorage.getItem(\"lastEvents\");\n        NProgress.done();\n        return events ? JSON.parse(events) : [];\n\n    }\n    const token = await getAccessToken();\n\n    if (token) {\n        removeQuery();\n        const url =  \"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/get-events\" + \"/\" + token;\n        const response = await fetch(url);\n        const result = await response.json();\n        if (result) {\n            NProgress.done();\n            localStorage.setItem(\"lastEvents\", JSON.stringify(result.events));\n            return result.events;\n        } else return null;\n    }\n};\n\nconst getToken = async (code) => {\n    try {\n        const encodeCode = encodeURIComponent(code);\n        const response = await fetch(\n          \"https://g0woxi8rqa.execute-api.us-west-1.amazonaws.com/dev/api/token\" + '/' + encodeCode\n        );\n        const { access_token } = await response.json();\n        access_token && localStorage.setItem(\"access_token\", access_token);\n\n        return access_token;\n    } catch (error) {\n        error.json();\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}